// ==UserScript==
// @name         Steam Workshop Subscription Lister (SWSL)
// @description  Generates HTML, JSON, TXT, CSV output of your Steam Workshop subscriptions for a game.
// @version      1.0.1
// @author       spacegears
// @match        https://steamcommunity.com/id/*/myworkshopfiles/?appid=*
// @namespace    https://github.com/spacegears/swsl
// @downloadURL  https://raw.githubusercontent.com/spacegears/SWSL/refs/heads/main/SWSL.js
// @updateURL    https://raw.githubusercontent.com/spacegears/SWSL/refs/heads/main/SWSL.js
// @icon         https://steamcommunity.com/favicon.ico
// @run-at       document-end
// ==/UserScript==

(function() {

	// --- START SETTINGS ---
	var autoNavigation = true;
	var debugMode = true;
	var pageWait = 2;
	var timestampFileNames = true;
	var lineEnding = '\r\n'; // '\n' for UNIX and '\r\n' for WINDOWS newlines
	// --- END SETTINGS ---

    function addSWSLButton () {
        const primaryPanel = document.querySelector('.primary_panel');
        const appID = checkAppID();

        if (primaryPanel && appID) {
            const newMenuPanel = document.createElement('div');
            newMenuPanel.className = "menu_panel";
            newMenuPanel.innerHTML = `
                <div class="rightSectionHolder">
                    <div class="rightDetailsBlock">
                        <span class="btn_grey_steamui btn_medium" id="runSWSL">
                            <span>Run SWSL</span>
                        </span>
                    </div>
                </div>`;
            primaryPanel.insertBefore(newMenuPanel, primaryPanel.children[3]);
        }
    }

    function checkAppID () {
        const urlParams = new URLSearchParams(location.search);
        return ((urlParams.has("appid")) && (urlParams.get("appid") != "0"));
    }

	function createFileLink (contEle, saveType, allData) {
		const details = getSaveDetails(saveType);
		const upperName = details.typeName.toUpperCase();
		dbgMsg(upperName, 'file details:', details);

		const eleId = scriptName+'-'+details.typeName+'-download';
		let newEle = document.querySelector('#'+eleId);
		if (newEle) {
			contEle.removeChild(newEle);
		}

		newEle = document.createElement('a');
		newEle.id = eleId;
		newEle.style = linkStyle;
		newEle.innerText = upperName;
		newEle.href = 'data:'+details.type+';charset=utf-8,'+encodeURIComponent(dataToType(details.typeName, allData));
		newEle.target = '_blank';
		newEle.download = details.file;
		contEle.appendChild(newEle);
		dbgMsg('Created '+upperName+' download link:', eleId, newEle);
	}

	function dataFromStorage () {
		const firstPage = 1;
		const lastPage = getLastPage();
		const prefix = getStoragePrefix();
		let allData = [];
		let currData = null;
		for(var iter = firstPage; iter <= lastPage; iter++) {
			let storageKey = prefix+iter;
			dbgMsg('Checking storage for', storageKey);
			currData = JSON.parse(localStorage.getItem(storageKey));
			if (!currData) {
				logMsg('[WARNING] No data found in storage for key', storageKey);
				continue;
			}
			currData.map(item => {
				allData.push(item);
			});
		}

		return allData;
	}

	function dataToHTML (data) {
		dbgMsg('Generating HTML output for', data.length, 'items');
		let output = [
            '<!-- ================================================================',
            '     - Generated by SWSL v'+scriptVersion+' (https://github.com/spacegears/SWSL)',
            '     - Created: '+created+'',
			'     - App: '+appName+' (App ID: '+appID+')',
			'     - Steam user: '+appUser+' ('+profileID+')',
			'     - Workshop items: '+data.length+'',
            '     ================================================================ -->',
            '',
            '<!DOCTYPE HTML>',
			'<html lang="en">',
			'<head>',
            '<meta charset="utf-8">',
			'<title>'+appName+' - Subscribed Steam Workshop Items</title>',
            '<style>',
            'body { background: #1B2838; font-family: "Verdana"; color: white;}',
            'img { max-height: 120px; grid-area: 1 / 1 / 2 / 2; border: 1px solid #36495E;}',
            '.grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); grid-gap: 1rem;',
            '> .item { background: #111A25; padding: 0.25rem; display: grid; place-items: center; text-align: center; border: 1px solid #36495E;',
            '&::before { content: ""; display: block; grid-area: 1 / 1 / 2 / 2; } } };',
            '</style>',
			'</head>',
			'<body>',
			'<div class="grid">',
		];

		data.map(item => {
            output.push('<div class="item"><a href="'+item.link+'" target="_blank"><img src="'+item.thumbnail+'" title="'+item.name+'"></a>'+item.name+'</div>');
		});

		output.push('</div>');
		output.push('</body>');
		output.push('</html>');
		return output.join(lineEnding);
	}

	function dataToJSON (data) {
		dbgMsg('Generating JSON output for', data.length, 'items');
		return JSON.stringify(data, null, '\t');
	}

	function dataToTXT (data) {
		dbgMsg('Generating TXT output for', data.length, 'items');
		let output = [
            '================================================================',
			'- Generated by SWSL v'+scriptVersion+' (https://github.com/spacegears/SWSL)',
            '- Created: '+created+'',
            '- App: '+appName+' (App ID: '+appID+')',
			'- Steam user: '+appUser+' ('+profileID+')',
			'- Workshop items: '+data.length+'',
            '================================================================',
			'',
		];

		data.map(item => {
			let itemDetails = [
				'Name: '+item.name,
				'Link: '+item.link,
				'Thumbnail: '+item.thumbnail,
                'Updated: '+item.updated,
			];
			output.push(itemDetails.join(lineEnding));
			output.push('');
		});
		return output.join(lineEnding);
	}

    	function dataToCSV (data) {
		dbgMsg('Generating CSV output for', data.length, 'items');

        let output = [
            '================================================================',
			'- Generated by SWSL v'+scriptVersion+' (https://github.com/spacegears/SWSL)',
            '- Created: '+created.replace(',','')+'',
            '- App: '+appName+' (App ID: '+appID+')',
			'- Steam user: '+appUser+' ('+profileID+')',
			'- Workshop items: '+data.length+'',
            '================================================================',
            '"Name","Link","Thumbnail","Updated"',
		];

		data.map(item => {
			output.push('"'+item.name+'","'+item.link+'","'+item.thumbnail+'","'+item.updated.replace(',','')+'"');
		});

		return output.join(lineEnding);
	}

	function dataToType (saveType, data) {
		let outputData = null;

		switch (saveType) {
			case 'csv':
				outputData = dataToCSV(data);
				break;
			case 'html':
				outputData = dataToHTML(data);
				break;
			case 'json':
				outputData = dataToJSON(data);
				break;
			case 'txt':
				outputData = dataToTXT(data);
				break;
			default:
				break;
		}
		return outputData;
	}

	function dbgMsg () {
		if (debugMode) {
			let args = Array.prototype.slice.call(arguments);
			args.unshift('[DEBUG]');
			logMsg.apply(this, args);
		}
	}

    function getQueryStrings () {
        const urlParams = new URLSearchParams(location.search);

        if (!urlParams.has('p')) {
            urlParams.set('p', '1');
        }

        const newUrl = location.pathname + '?' + urlParams.toString();
        history.replaceState(null, '', newUrl); // If needed, update the URL

        let queryString = {};
        location.search.replace(/^\?/, '').split('&').map(chunk => {
            let keyVal = chunk.split('=');
            queryString[keyVal[0]] = keyVal[1];
        });

        return queryString;
    }

	function getAppID () {
		return getQueryStrings().appid;
	}

	function getAppName () {
		let navEles = document.querySelectorAll('.HeaderUserInfoSection');
		return navEles[navEles.length - 1].innerText;
	}

    function getCurrPage () {
		return parseInt(getQueryStrings().p, 10);
	}

	function getCurrSubscribed () {
		const currElements = Array.prototype.slice.call(document.querySelectorAll('.workshopItemSubscription[id^="Subscr"]'));
		let currDetails = currElements.map(function(ele) {
			const nameEle = ele.querySelector('.workshopItemTitle');
            const linkEle = ele.querySelector('.workshopItemSubscriptionDetails > a');
			const thumbEle = ele.querySelector('.workshopItemPreviewImage');
            const updatedEle = ele.querySelectorAll('.workshopItemDate');

			return {
				'name': nameEle.innerText,
				'link': linkEle.getAttribute('href'),
				'thumbnail': thumbEle.getAttribute('src').replace(/\?.*/, ''),
                'updated': updatedEle[updatedEle.length - 1].innerText.replace('Last Updated ', '').trim(),
			};
		});
		const details = currDetails.filter(item => {
			if (!item) return false;
			return item.link.includes('/steamcommunity.com/');
		});
		return details;
	}

    function getLastPage() {
        const pagingControls = document.querySelector('.workshopBrowsePagingControls');
        if (!pagingControls) {
            return 1;
        }

        const pageLinks = pagingControls.querySelectorAll('.pagelink');
        if (pageLinks.length === 0) {
            return 1;
        }

        const lastP = parseInt(pageLinks[pageLinks.length - 1].innerText, 10);
        const currP = getCurrPage();

        // Account for the selector potentially missing the last page
        return currP > lastP ? currP : lastP;
    }

	function getSaveDetails (saveType) {
		let fileExt = '.txt';
		let fileType = 'text/plain';
		let typeName = 'txt';

		switch (saveType) {
			case 'csv':
				fileExt = '.csv';
				fileType = 'application/csv';
				typeName = 'csv';
				break;
			case 'html':
				fileExt = '.html';
				fileType = 'text/html';
				typeName = 'html';
				break;
			case 'json':
				fileExt = '.json';
				fileType = 'application/json';
				typeName = 'json';
				break;
			default:
				break;
		}

		let fileName = appName.replace(/[^A-Za-z0-9 _\-]/g, '')+' - Subscribed Steam Workshop Items'; // ('+appID+') ... '+appUser;
		if (timestampFileNames) {
            // https://stackoverflow.com/a/50130338
            const now = new Date();
            const dateString = new Date(now.getTime() - (now.getTimezoneOffset() * 60000 )).toISOString().split("T")[0];

            fileName += ' ('+dateString+')';
		}
		fileName += fileExt;

		return {
			'ext': fileExt,
			'type': fileType,
			'typeName': typeName,
			'file': fileName,
		};
	}

	function getStoragePrefix () {
		return scriptName+'-subscribed-'+getAppID()+'-p';
	}

	function getUser () {
		return document.querySelector('#account_pulldown').innerText;
	}

    function getProfileID () {
        const url = document.querySelector('#HeaderUserInfoName a').href;
        const profileID = url.split('/id/')[1];
        return profileID;
    }

	function goToNextPage () {
		const currPage = getCurrPage();
		const remaining = parseInt(getLastPage() - currPage, 10);
		if (remaining > 0) {
			if (!autoNavigation) {
				logMsg('Automatic navigation is off. You must load the next page manually.');
				return;
			}

			const newUri = document.location.toString().replace('&p='+currPage, '&p='+(currPage + 1));
			logMsg('Navigating in '+pageWait+' seconds. Reload the page to abort. Next page is located at "'+newUri+'"');
			setTimeout(function() {
				logMsg('Navigating to "'+newUri+'"');
				document.location = newUri;
			}, pageWait * 1000);
		} else {
			logMsg('Last page reached. Begin storage dump of pages.');
			createLinks();
		}
	}

	function logMsg () {
		let args = Array.prototype.slice.call(arguments);
		args.unshift('# '+scriptName+':');
		console.log.apply(console, args);
	}

    function createdDate () {
        const now = new Date();
        const formattedDate = now.toLocaleString('en-US', {
            month: 'long',
            day: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: false
        });

        return formattedDate;
    }

    function startSWSL () {
        sessionStorage.setItem("swsl-running", JSON.stringify(true));

        const urlParams = new URLSearchParams(location.search);
        const pValue = urlParams.get("p");

        if (pValue > 1) {
            urlParams.set("p", 1);
            location.search = urlParams.toString();
        }

        runSWSL();
    }

	function runSWSL () {
        let appIDset = checkAppID();
        let swslRunning = JSON.parse(sessionStorage.getItem("swsl-running") || "false");

        if (!appIDset || !swslRunning) {
            return;
        } else {
            dbgMsg('Found AppID:', appID);
            const currPage = getCurrPage();
            dbgMsg('Current Page:', currPage);
            const lastPage = getLastPage();
            dbgMsg('Remaining Pages:', lastPage - currPage);
            const pageSubscribedItemList = getCurrSubscribed();
            dbgMsg('Subscribed Items Found:', pageSubscribedItemList);
            const storageName = getStoragePrefix()+currPage;
            dbgMsg('Saving Workshop items page to localStorage as', storageName);
            localStorage.setItem(storageName, JSON.stringify(pageSubscribedItemList));
            document.getElementById("runSWSL").querySelector("span").innerHTML = "SWSL: Please wait...";

            if (pageSubscribedItemList.length > 0) {
                goToNextPage();
            }
        }
	}

	function createLinks () {
		const allData = dataFromStorage();
		dbgMsg('Retrieved data from storage.', allData);

		const contEleId = scriptName+'-container';
		let contEle = document.querySelector('#'+contEleId);
		if (!contEle) {
			contEle = document.createElement('div');
			contEle.id = contEleId;
			document.querySelector('body').appendChild(contEle);
		}
		contEle.style = containerStyle;
		contEle.innerHTML = '';

		const headerEleId = scriptName+'-header';
		let headerEle = document.createElement('span');
		headerEle.id = contEleId;
		headerEle.innerHTML = 'Download links for:<br><strong>'+appName+'</strong>';
		contEle.appendChild(headerEle);
		headerEle.style = headerStyle;
		contEle.appendChild(headerEle);
		dbgMsg('Created container', contEleId, contEle);

		createFileLink(contEle, 'html', allData);
		createFileLink(contEle, 'json', allData);
		createFileLink(contEle, 'txt', allData);
        createFileLink(contEle, 'csv', allData);

        sessionStorage.setItem("swsl-running", JSON.stringify(false));
        document.getElementById("runSWSL").querySelector("span").innerHTML = "Run SWSL";
	}

	var scriptName = 'swsl';
    var scriptVersion = GM_info.script.version;
	var appName = getAppName();
	var appID = getAppID();
	var appUser = getUser();
    var profileID = getProfileID();
    var created = createdDate();
	var containerCSS = [
		'display: block',
		'position: fixed',
		'top: 114px',
		// 'bottom: 0',
		'min-height: 100px',
		'min-width: 100px',
		'margin: 10px',
		'padding: 10px',
		'text-align: center',
		'border: 2px solid #417b9c',
		'z-index: 500',
		'background: #101822',
		'opacity: 85%',
	];
	var containerStyle = containerCSS.join(';');
	var headerCSS = [
		'display: block',
		'margin: 0',
		'padding: 0',
		'padding-bottom: 5px',
		'width: 100%',
		'text-align: center',
		'color: #8f98a0',
	];
	var headerStyle = headerCSS.join(';');
	var linkCSS = [
		'display: block',
		'padding: 5px',
		'margin: 5px',
		'margin-bottom: 0px',
		'text-align: center',
        'border: 2px solid #172030',
		'background: linear-gradient(to bottom, #a4d007 5%, #536904 95%)',
		'color: white',
		'font-weight: normal',
		'z-index:500',
	];
	var linkStyle = linkCSS.join(';');

    addSWSLButton();
    runSWSL();

    document.getElementById("runSWSL").onclick = () => startSWSL();
})();